/*
 * This file is generated by jOOQ.
 */
package db.tables;


import db.Indexes;
import db.Keys;
import db.Public;
import db.tables.records.PaymentRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Payment extends TableImpl<PaymentRecord> {

    private static final long serialVersionUID = 2090318584;

    /**
     * The reference instance of <code>PUBLIC.PAYMENT</code>
     */
    public static final Payment PAYMENT = new Payment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentRecord> getRecordType() {
        return PaymentRecord.class;
    }

    /**
     * The column <code>PUBLIC.PAYMENT.PAYMENT_ID</code>.
     */
    public final TableField<PaymentRecord, UUID> PAYMENT_ID = createField(DSL.name("PAYMENT_ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAYMENT.PAYLOAD</code>.
     */
    public final TableField<PaymentRecord, String> PAYLOAD = createField(DSL.name("PAYLOAD"), org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.PAYMENT.TIMESTAMP</code>.
     */
    public final TableField<PaymentRecord, Timestamp> TIMESTAMP = createField(DSL.name("TIMESTAMP"), org.jooq.impl.SQLDataType.TIMESTAMP.precision(6).nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.PAYMENT</code> table reference
     */
    public Payment() {
        this(DSL.name("PAYMENT"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.PAYMENT</code> table reference
     */
    public Payment(String alias) {
        this(DSL.name(alias), PAYMENT);
    }

    /**
     * Create an aliased <code>PUBLIC.PAYMENT</code> table reference
     */
    public Payment(Name alias) {
        this(alias, PAYMENT);
    }

    private Payment(Name alias, Table<PaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private Payment(Name alias, Table<PaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Payment(Table<O> child, ForeignKey<O, PaymentRecord> key) {
        super(child, key, PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_F);
    }

    @Override
    public UniqueKey<PaymentRecord> getPrimaryKey() {
        return Keys.PK_T_PAYMENT;
    }

    @Override
    public List<UniqueKey<PaymentRecord>> getKeys() {
        return Arrays.<UniqueKey<PaymentRecord>>asList(Keys.PK_T_PAYMENT);
    }

    @Override
    public Payment as(String alias) {
        return new Payment(DSL.name(alias), this);
    }

    @Override
    public Payment as(Name alias) {
        return new Payment(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(String name) {
        return new Payment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payment rename(Name name) {
        return new Payment(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, Timestamp> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
