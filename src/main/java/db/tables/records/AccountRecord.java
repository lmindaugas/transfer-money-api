/*
 * This file is generated by jOOQ.
 */
package db.tables.records;


import db.tables.Account;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record5<String, String, BigDecimal, String, String> {

    private static final long serialVersionUID = 436274874;

    /**
     * Setter for <code>PUBLIC.ACCOUNT.ID</code>.
     */
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.ID</code>.
     */
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.NAME</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.NAME</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.BALANCE</code>.
     */
    public void setBalance(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.BALANCE</code>.
     */
    public BigDecimal getBalance() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.CURRENCY</code>.
     */
    public void setCurrency(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.CURRENCY</code>.
     */
    public String getCurrency() {
        return (String) get(3);
    }

    /**
     * Setter for <code>PUBLIC.ACCOUNT.STATUS</code>.
     */
    public void setStatus(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.ACCOUNT.STATUS</code>.
     */
    public String getStatus() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, BigDecimal, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<String, String, BigDecimal, String, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Account.ACCOUNT.ID;
    }

    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.NAME;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Account.ACCOUNT.BALANCE;
    }

    @Override
    public Field<String> field4() {
        return Account.ACCOUNT.CURRENCY;
    }

    @Override
    public Field<String> field5() {
        return Account.ACCOUNT.STATUS;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public BigDecimal component3() {
        return getBalance();
    }

    @Override
    public String component4() {
        return getCurrency();
    }

    @Override
    public String component5() {
        return getStatus();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public BigDecimal value3() {
        return getBalance();
    }

    @Override
    public String value4() {
        return getCurrency();
    }

    @Override
    public String value5() {
        return getStatus();
    }

    @Override
    public AccountRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public AccountRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public AccountRecord value3(BigDecimal value) {
        setBalance(value);
        return this;
    }

    @Override
    public AccountRecord value4(String value) {
        setCurrency(value);
        return this;
    }

    @Override
    public AccountRecord value5(String value) {
        setStatus(value);
        return this;
    }

    @Override
    public AccountRecord values(String value1, String value2, BigDecimal value3, String value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(String id, String name, BigDecimal balance, String currency, String status) {
        super(Account.ACCOUNT);

        set(0, id);
        set(1, name);
        set(2, balance);
        set(3, currency);
        set(4, status);
    }
}
