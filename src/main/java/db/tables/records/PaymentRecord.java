/*
 * This file is generated by jOOQ.
 */
package db.tables.records;


import db.tables.Payment;

import java.sql.Timestamp;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PaymentRecord extends UpdatableRecordImpl<PaymentRecord> implements Record3<UUID, String, Timestamp> {

    private static final long serialVersionUID = -552467694;

    /**
     * Setter for <code>PUBLIC.PAYMENT.PAYMENT_ID</code>.
     */
    public void setPaymentId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.PAYMENT.PAYMENT_ID</code>.
     */
    public UUID getPaymentId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>PUBLIC.PAYMENT.PAYLOAD</code>.
     */
    public void setPayload(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.PAYMENT.PAYLOAD</code>.
     */
    public String getPayload() {
        return (String) get(1);
    }

    /**
     * Setter for <code>PUBLIC.PAYMENT.TIMESTAMP</code>.
     */
    public void setTimestamp(Timestamp value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.PAYMENT.TIMESTAMP</code>.
     */
    public Timestamp getTimestamp() {
        return (Timestamp) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, String, Timestamp> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, String, Timestamp> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Payment.PAYMENT.PAYMENT_ID;
    }

    @Override
    public Field<String> field2() {
        return Payment.PAYMENT.PAYLOAD;
    }

    @Override
    public Field<Timestamp> field3() {
        return Payment.PAYMENT.TIMESTAMP;
    }

    @Override
    public UUID component1() {
        return getPaymentId();
    }

    @Override
    public String component2() {
        return getPayload();
    }

    @Override
    public Timestamp component3() {
        return getTimestamp();
    }

    @Override
    public UUID value1() {
        return getPaymentId();
    }

    @Override
    public String value2() {
        return getPayload();
    }

    @Override
    public Timestamp value3() {
        return getTimestamp();
    }

    @Override
    public PaymentRecord value1(UUID value) {
        setPaymentId(value);
        return this;
    }

    @Override
    public PaymentRecord value2(String value) {
        setPayload(value);
        return this;
    }

    @Override
    public PaymentRecord value3(Timestamp value) {
        setTimestamp(value);
        return this;
    }

    @Override
    public PaymentRecord values(UUID value1, String value2, Timestamp value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PaymentRecord
     */
    public PaymentRecord() {
        super(Payment.PAYMENT);
    }

    /**
     * Create a detached, initialised PaymentRecord
     */
    public PaymentRecord(UUID paymentId, String payload, Timestamp timestamp) {
        super(Payment.PAYMENT);

        set(0, paymentId);
        set(1, payload);
        set(2, timestamp);
    }
}
